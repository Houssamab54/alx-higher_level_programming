# The ``0-add_integer`` module
============================================
How to use 0-add_integer.py
============================================

This library has one function called ``add_integer()``

Numbers
=======

``add_integer()`` returns the sum of its arguments. The default argument
for b is 98. For numbers, that value is equivalent to using the ``+``
operator:

Importing the function add_integer.
    >>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

Non-Numbers
===========

This file contains doctests for the add_integer() function.

The add_integer() function takes two arguments, 'a' and 'b', and returns their sum as an integer.
If 'b' is not provided, it defaults to 98.
If 'a' or 'b' is a float, it is first cast to an integer before addition.
If 'a' or 'b' is not an integer or a float, a TypeError is raised.

Testing adding two integers:
>>> add_integer(0, 0)
0

>>> add_integer(1, 1)
2

>>> add_integer(-1, -1)
-2

Testing adding a positive and a negative integer:
>>> add_integer(1, -1)
0

Testing adding two integers of different magnitudes:
>>> add_integer(999, 1)
1000

>>> add_integer(1, 999)
1000

Testing adding a large positive integer and a negative integer:
>>> add_integer(999, -1)
998

Testing adding a negative integer and a large positive integer:
>>> add_integer(-1, 999)
998

Testing adding an integer and a float:
>>> add_integer(2.0, 3)
5

>>> add_integer(2, 3.0)
5

Testing adding two floats:
>>> add_integer(2.4, 3.6)
5

Testing adding an integer and a negative integer:
>>> add_integer(2, -3)
-1

Testing adding a negative integer and a positive integer:
>>> add_integer(-2, 3)
1

Testing adding an integer and a float that results in a negative integer:
>>> add_integer(2, -3.0)
-1

Testing adding a float and an integer that results in a positive integer:
>>> add_integer(-2.0, 3)
1

Testing adding two floats that results in a negative integer:
>>> add_integer(2.0, -3.0)
-1

Testing passing invalid arguments:
>>> add_integer(2, "3")
Traceback (most recent call last):
    ...
TypeError: b must be an integer or a float

>>> add_integer("2", 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer or a float

Testing adding boolean values:
>>> add_integer(True, False)
1

>>> add_integer(True, True)
2

>>> add_integer(False, False)
0

Testing adding two positive floats:
>>> add_integer(1.5, 2.5)
4

Testing adding two negative floats:
>>> add_integer(-1.5, -2.5)
-4

Testing adding a positive and a negative float:
>>> add_integer(1.5, -2.5)
-1

Testing adding a negative and a positive float:
>>> add_integer(-1.5, 2.5)
1
